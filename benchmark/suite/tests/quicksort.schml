(let ([a : (GVect Int) (gvector 10 1)])
  (begin
    (gvector-set! a 0 42)
    (gvector-set! a 1 10)
    (gvector-set! a 2 5)
    (gvector-set! a 3 9)
    (gvector-set! a 4 25)
    (gvector-set! a 5 8)
    (gvector-set! a 6 87)
    (gvector-set! a 7 7)
    (gvector-set! a 8 29)
    (gvector-set! a 9 0)
    (letrec ([sort : (Int Int -> Int)
                   (lambda ([p : Int] [r : Int]) : Int
                     (if (< p r)
		     	 (let ([q : Int (partition p r)])
                           (begin
                             (sort p (- q 1))
                             (sort (+ q 1) r)))
                         0))]
             [partition : (Int Int -> Int)
                        (lambda ([p : Int] [r : Int]) : Int
                          (let ([i : (GRef Int) (gbox (- p 1))]
                                [x : Int (gvector-ref a r)])
                            (begin
                              (repeat (j p r)
                                      (if (<= (gvector-ref a j) x)
                                          (begin
                                            (gbox-set! i (+ (gunbox i) 1))
                                            (swap (gunbox i) j))
                                          0))
                              (swap (+ (gunbox i) 1) r)
                              (+ (gunbox i) 1))))]
             [swap : (Int Int -> Int)
                   (lambda ([i : Int] [j : Int]) : Int
                     (if (= i j)
                         0
                         (let ([t : Int (gvector-ref a i)])
                           (begin
                             (gvector-set! a i (gvector-ref a j))
                             (gvector-set! a j t)
                             0))))])
      (sort 0 9))
    (gvector-ref a 9)))
