(letrec ([one : (Dyn -> Dyn) (lambda (f) f)] 
         [const
          : ((-> Dyn) -> Dyn)
          #;((! (-> ⋆)) -> ı)
          (lambda (a) (a))])
  
  (let ([is0  : ((-> (Dyn -> Dyn)) -> (Dyn -> Dyn))
              ;; Step 1
              #; (cast const ((-> (! (⋆ -> ⋆))) -> (? l (⋆ -> ⋆))))
              #; (cast (casted (λ (a) a) ((! (-> ⋆)) -> ı))
                       ((-> (! (⋆ -> ⋆))) -> (? l (⋆ -> ⋆))))
              #; (cast (λ (a) a)
                       (compose ((! (-> ⋆)) -> ı)
                                ((-> (! (⋆ -> ⋆))) -> (? l (⋆ -> ⋆)))))
              #; (cast (λ (a) a)
                       ((compose (-> (! (⋆ -> ⋆))) (! (-> ⋆))) ->
                        (compose (? l (⋆ -> ⋆)) ı)))
              #; (cast (λ (a) a)
                       ((seq (-> (! (⋆ -> ⋆))) (! (-> ⋆))) ->
                        (? l (⋆ -> ⋆)))))
              const])
    (is0 (lambda () one))
    ;; Step 2
    #;((cast (λ (a) a)
             ((seq (-> (! (⋆ -> ⋆))) (! (-> ⋆))) ->
              (? l (⋆ -> ⋆))))
       (lambda () one))
    ;; Step 3
    #; (cast ((λ (a) a) (cast (lambda () one)
                              (seq (-> (! (⋆ -> ⋆))) (! (-> ⋆)))))
             (? l (⋆ -> ⋆)))
    ;; Step 4
    #; (cast ((casted (lambda () one)
                      (seq (-> (! (⋆ -> ⋆))) (! (-> ⋆)))))
             (? l (⋆ -> ⋆)))
    ;; Step 5
    #; (cast ((cast (casted (lambda () one)
                           (seq (-> (! (⋆ -> ⋆))) (! (-> ⋆))))
                    (? (-> ⋆))))
             (? l (⋆ -> ⋆)))
    ;; Step 6
    #; (cast ((casted (lambda () one) (-> (! (⋆ -> ⋆)))))
             (? l (⋆ -> ⋆)))
    ;; Step 7
    #; (cast (cast ((lambda () one)) (! (⋆ -> ⋆)))
             (? l (⋆ -> ⋆)))
    ;; Step 8
    #; (cast (cast one (! (⋆ -> ⋆)))
             (? l (⋆ -> ⋆)))
    ;; Step 9
    #; (cast (casted one (! (⋆ -> ⋆)))
             (? l (⋆ -> ⋆)))
    ;; Step 10
    ;; one : (⋆ -> ⋆)
    ))
