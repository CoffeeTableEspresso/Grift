
* Value Representation
** Ground values values for simplicity all immediate values are 64bit words
*** Int = long
*** Bool = #f -> 0 #t -> 1
*** Closure = Aligned Pointer (ie ??????000 last three bits are zero)

** Dynamic Values 
(We may not know the underlying type but we staticly know that we don't know) 
(because of the way that integers are cast we may have to get look for the pattern
 (: (+ (: n Dyn) (: m Int)) Dyn) in order to justify using the current tag  
*** Dyn Int = int-value << 3
*** Dyn Bool = (bool-value << 3) + 8
*** Dyn Fn = dyn-ptr + 1 -> {closure-ptr, type-ptr}

** Types and Other artifacts of implementation

*** Structured types are aligned pointers to a type record with a 3 bit tag
**** Function = Aligned Pointer

*** Atomic types have the last 3 bits set to #b111
**** Fn = 0????000
**** Dyn  = 7  | #b0000111
**** Int  = 15 | #b0001111
**** Bool = 23 | #b0010111
*** Structured Types need to be allocated and tagged
**** (Fn 3 (t1 t2 t3) t4) 
     {3, t4, t1, t2, t3}
     == (let ((fn (alloc 5)))
          (Array-set! fn 0 3)
	  (Array-set! fn 1 t4)
	  (Array-set! fn 2 t1)
	  (Array-set! fn 3 t2)
	  (Array-set! fn 4 t3))
**** (Fn-arity t) -> (Array-ref t 0)
**** (Fn-returns t) -> (Array-ref t 1)
**** (Fn-arg t n) -> (Array-ref t (+ 2 n))


* Operators for the Uil
** Numeric and Relational operators
   * + - binary-and binary-or << >> < <= = > >=
** Array operators
   Alloc Array-ref Array-set!

* Representation of higher level operators is straight forward
(Not happy with current thoughs on handling types and dynamics)
** Closures
*** Clos-make -> Alloc
*** Clos-ref & Clos-set! -> Array-ref & Array-set!
** Types 
Since we are never mutating types they may be staticly allocated if we
could control where they are being placed. For compiling to C we will
likely need to dynamically allocate them as arrays. As an optimization 
for the future we could treat optimize like most literals by lifting them 
consolidating like constants and allocating all at once. 
*** Imediates are just the numeric representation


