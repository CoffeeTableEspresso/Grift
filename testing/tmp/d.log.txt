Source:
(let ([fact (lambda ([f : (Dyn Int -> Int)] [n : Int]) : Int
               (if (= n 0)    
                   1
                   (* n (f f (- n 1)))))])
  (fact fact 15))
  

Cast0:
(Prog (list "fact15.schml" 3 #0=(Int)) (Let (list (Bnd #2=(Uid "fact" 0) #6=(Fn 2 (list #1=(Fn 2 (list #3=(Dyn) #0#) #0#) #0#) #0#) (Lambda (list (Fml #5=(Uid "f" 2) #1#) (Fml #4=(Uid "n" 1) #0#)) #0# (If (Op '= (list (Var #4#) (Quote 0))) (Quote 1) (Op '* (list (Var #4#) (App (Var #5#) (list (Cast (Var #5#) #1# #3# "Implicit cast in application at fact15.schml::138 on expression at fact15.schml::141") (Op '- (list (Var #4#) (Quote 1))))))))))) (App (Var #2#) (list (Cast (Var #2#) #6# #1# "Implicit cast in application at fact15.schml::159 on expression at fact15.schml::165") (Quote 15)))))

Lambda0:
#(struct:Prog (fact15.schml 30 #(struct:Int)) #(struct:Letrec ((#14=#(struct:Uid interp_cast 10) . #(struct:Lambda (#21=#(struct:Uid val 11) #23=#(struct:Uid type1 13) #22=#(struct:Uid type2 14) #20=#(struct:Uid label 15)) #f #(struct:Castable #f #(struct:If #(struct:Op = (#(struct:Var #23#) #(struct:Quote 7))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Var #21#) #(struct:Let ((#34=#(struct:Uid tag 16) . #(struct:Op binary-and (#(struct:Var #21#) #(struct:Quote 7))))) #(struct:If #(struct:Op = (#(struct:Quote 1) #(struct:Var #34#))) #(struct:If #(struct:Op = (#(struct:Quote 15) #(struct:Var #22#))) #(struct:Op %>> (#(struct:Var #21#) #(struct:Quote 3))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Op %>> (#(struct:Var #21#) #(struct:Quote 3))) #(struct:Quote 3))) #(struct:Quote 1))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #34#))) #(struct:If #(struct:Op = (#(struct:Quote 23) #(struct:Var #22#))) #(struct:Op %>> (#(struct:Var #21#) #(struct:Quote 3))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Op %>> (#(struct:Var #21#) #(struct:Quote 3))) #(struct:Quote 3))) #(struct:Quote 7))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:If #(struct:Op = (#(struct:Quote 0) #(struct:Var #34#))) #(struct:Let ((#28=#(struct:Uid type1 17) . #(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 1))))) #(struct:Let ((#33=#(struct:Uid tag1 18) . #(struct:Op binary-and (#(struct:Var #28#) #(struct:Quote 7))))) #(struct:If #(struct:Op = (#(struct:Quote 0) #(struct:Var #33#))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Let ((#32=#(struct:Uid dyn_box 28) . #(struct:Op Alloc (#(struct:Quote 2))))) #(struct:Begin (#(struct:Op Array-set! (#31=#(struct:Var #32#) #(struct:Quote 0) #(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))))) #(struct:Op Array-set! (#31# #(struct:Quote 1) #(struct:Var #28#)))) #31#)) #(struct:Let ((#30=#(struct:Uid tag2 19) . #(struct:Op binary-and (#(struct:Var #22#) #(struct:Quote 7))))) #(struct:If #(struct:Op = (#(struct:Var #30#) #(struct:Quote 0))) #(struct:Let ((#29=#(struct:Uid value 20) . #(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))))) #(struct:App #(struct:Fn-Caster #(struct:Var #29#)) (#(struct:Var #29#) #(struct:Var #28#) #(struct:Var #22#) #(struct:Var #20#)))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0))))) #(struct:If #(struct:Op = (#(struct:Var #28#) #(struct:Quote 15))) #(struct:If #(struct:Op = (#(struct:Quote 15) #(struct:Var #22#))) #(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))) #(struct:Quote 3))) #(struct:Quote 1))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:If #(struct:Op = (#(struct:Var #28#) #(struct:Quote 23))) #(struct:If #(struct:Op = (#(struct:Quote 23) #(struct:Var #22#))) #(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Op Array-ref (#(struct:Var #21#) #(struct:Quote 0))) #(struct:Quote 3))) #(struct:Quote 7))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0))))))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0))))))) #(struct:Let ((#27=#(struct:Uid tag1 21) . #(struct:Op binary-and (#(struct:Var #23#) #(struct:Quote 7))))) #(struct:If #(struct:Op = (#(struct:Quote 0) #(struct:Var #27#))) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Let ((#26=#(struct:Uid dyn_box 29) . #(struct:Op Alloc (#(struct:Quote 2))))) #(struct:Begin (#(struct:Op Array-set! (#25=#(struct:Var #26#) #(struct:Quote 0) #(struct:Var #21#))) #(struct:Op Array-set! (#25# #(struct:Quote 1) #(struct:Var #23#)))) #25#)) #(struct:Let ((#24=#(struct:Uid tag2 22) . #(struct:Op binary-and (#(struct:Var #22#) #(struct:Quote 7))))) #(struct:If #(struct:Op = (#(struct:Var #24#) #(struct:Quote 0))) #(struct:App #(struct:Fn-Caster #(struct:Var #21#)) (#(struct:Var #21#) #(struct:Var #23#) #(struct:Var #22#) #(struct:Var #20#))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0))))) #(struct:If #(struct:Op = (#(struct:Var #23#) #(struct:Quote 15))) #(struct:If #(struct:Op = (#(struct:Quote 15) #(struct:Var #22#))) #(struct:Var #21#) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Var #21#) #(struct:Quote 3))) #(struct:Quote 1))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:If #(struct:Op = (#(struct:Var #23#) #(struct:Quote 23))) #(struct:If #(struct:Op = (#(struct:Quote 23) #(struct:Var #22#))) #(struct:Var #21#) #(struct:If #(struct:Op = (#(struct:Quote 7) #(struct:Var #22#))) #(struct:Op + (#(struct:Op %<< (#(struct:Var #21#) #(struct:Quote 3))) #(struct:Quote 7))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0)))) #(struct:Begin (#(struct:Op Print (#(struct:Var #20#))) #(struct:Op Exit ())) #(struct:Quote 0))))))))))) #(struct:Let ((#0=#(struct:Uid prog_returns 23) . #(struct:Letrec ((#12=#(struct:Uid cast_fn2 3) . #(struct:Lambda (#19=#(struct:Uid f 4) #16=#(struct:Uid t1 5) #15=#(struct:Uid t2 6) #13=#(struct:Uid lbl 7)) #f #(struct:Castable #f #(struct:If #(struct:Op = (#(struct:Op Array-ref (#(struct:Var #16#) #(struct:Quote 0))) #(struct:Op Array-ref (#(struct:Var #15#) #(struct:Quote 0))))) #(struct:Lambda (#17=#(struct:Uid v 9) #18=#(struct:Uid v 8)) #f #(struct:Castable #12# #(struct:App #(struct:Var #14#) (#(struct:App #(struct:Var #19#) (#(struct:App #(struct:Var #14#) (#(struct:Var #17#) #(struct:Op Array-ref (#(struct:Var #15#) #(struct:Quote 2))) #(struct:Op Array-ref (#(struct:Var #16#) #(struct:Quote 2))) #(struct:Var #13#))) #(struct:App #(struct:Var #14#) (#(struct:Var #18#) #(struct:Op Array-ref (#(struct:Var #15#) #(struct:Quote 3))) #(struct:Op Array-ref (#(struct:Var #16#) #(struct:Quote 3))) #(struct:Var #13#))))) #(struct:Op Array-ref (#(struct:Var #16#) #(struct:Quote 1))) #(struct:Op Array-ref (#(struct:Var #15#) #(struct:Quote 1))) #(struct:Var #13#))))) #(struct:Lambda () #f #(struct:Castable #12# #(struct:Begin (#(struct:Op Print (#(struct:Var #13#))) #(struct:Op Exit ())) #(struct:Quote 0))))))))) #(struct:Let ((#7=#(struct:Uid fact 0) . #(struct:Lambda (#11=#(struct:Uid f 2) #10=#(struct:Uid n 1)) #f #(struct:Castable #12# #(struct:If #(struct:Op = (#(struct:Var #10#) #(struct:Quote 0))) #(struct:Quote 1) #(struct:Op * (#(struct:Var #10#) #(struct:App #(struct:Var #11#) (#(struct:App #(struct:Var #14#) (#(struct:Var #11#) #(struct:Let ((#9=#(struct:Uid tmp 27) . #(struct:Op Alloc (#(struct:Quote 4))))) #(struct:Begin (#(struct:Op Array-set! (#8=#(struct:Var #9#) #(struct:Quote 0) #(struct:Quote 2))) #(struct:Op Array-set! (#8# #(struct:Quote 1) #(struct:Quote 15))) #(struct:Op Array-set! (#8# #(struct:Quote 2) #(struct:Quote 7))) #(struct:Op Array-set! (#8# #(struct:Quote 3) #(struct:Quote 15)))) #8#)) #(struct:Quote 7) #(struct:Quote Implicit cast in application at fact15.schml::138 on expression at fact15.schml::141))) #(struct:Op - (#(struct:Var #10#) #(struct:Quote 1)))))))))))) #(struct:App #(struct:Var #7#) (#(struct:App #(struct:Fn-Caster #(struct:Var #7#)) (#(struct:Var #7#) #(struct:Let ((#4=#(struct:Uid tmp 25) . #(struct:Op Alloc (#(struct:Quote 4))))) #(struct:Begin (#(struct:Op Array-set! (#1=#(struct:Var #4#) #(struct:Quote 0) #(struct:Quote 2))) #(struct:Op Array-set! (#1# #(struct:Quote 1) #(struct:Quote 15))) #(struct:Op Array-set! (#1# #(struct:Quote 2) #(struct:Let ((#3=#(struct:Uid tmp 26) . #(struct:Op Alloc (#(struct:Quote 4))))) #(struct:Begin (#(struct:Op Array-set! (#2=#(struct:Var #3#) #(struct:Quote 0) #(struct:Quote 2))) #(struct:Op Array-set! (#2# #(struct:Quote 1) #(struct:Quote 15))) #(struct:Op Array-set! (#2# #(struct:Quote 2) #(struct:Quote 7))) #(struct:Op Array-set! (#2# #(struct:Quote 3) #(struct:Quote 15)))) #2#)))) #(struct:Op Array-set! (#1# #(struct:Quote 3) #(struct:Quote 15)))) #1#)) #(struct:Let ((#6=#(struct:Uid tmp 24) . #(struct:Op Alloc (#(struct:Quote 4))))) #(struct:Begin (#(struct:Op Array-set! (#5=#(struct:Var #6#) #(struct:Quote 0) #(struct:Quote 2))) #(struct:Op Array-set! (#5# #(struct:Quote 1) #(struct:Quote 15))) #(struct:Op Array-set! (#5# #(struct:Quote 2) #(struct:Quote 7))) #(struct:Op Array-set! (#5# #(struct:Quote 3) #(struct:Quote 15)))) #5#)) #(struct:Quote Implicit cast in application at fact15.schml::159 on expression at fact15.schml::165))) #(struct:Quote 15))))))) #(struct:Begin (#(struct:Op Printf (#(struct:Quote Int : %d
) #(struct:Var #0#)))) #(struct:Quote 0)))))

Data0:
(Prog (list "fact15.schml" 45 (Int)) (Labels (list (cons #8=(Uid "interp_cast_code" 35) (Code (list (Uid "interp_cast_clos" 34) #10=(Uid "val" 11) #12=(Uid "type1" 13) #11=(Uid "type2" 14) #9=(Uid "label" 15)) (If (Op '= (list (Var #12#) (Quote 7))) (If (Op '= (list (Quote 7) (Var #11#))) (Var #10#) (Let (list (cons #23=(Uid "tag" 16) (Op 'binary-and (list (Var #10#) (Quote 7))))) (If (Op '= (list (Quote 1) (Var #23#))) (If (Op '= (list (Quote 15) (Var #11#))) (Op '%>> (list (Var #10#) (Quote 3))) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Op '%>> (list (Var #10#) (Quote 3))) (Quote 3))) (Quote 1))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (If (Op '= (list (Quote 7) (Var #23#))) (If (Op '= (list (Quote 23) (Var #11#))) (Op '%>> (list (Var #10#) (Quote 3))) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Op '%>> (list (Var #10#) (Quote 3))) (Quote 3))) (Quote 7))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (If (Op '= (list (Quote 0) (Var #23#))) (Let (list (cons #17=(Uid "type1" 17) (Op 'Array-ref (list (Var #10#) (Quote 1))))) (Let (list (cons #22=(Uid "tag1" 18) (Op 'binary-and (list (Var #17#) (Quote 7))))) (If (Op '= (list (Quote 0) (Var #22#))) (If (Op '= (list (Quote 7) (Var #11#))) (Let (list (cons #21=(Uid "dyn_box" 28) (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #21#) (Quote 0) (Op 'Array-ref (list (Var #10#) (Quote 0))))) (Op 'Array-set! (list (Var #21#) (Quote 1) (Var #17#)))) (Var #21#))) (Let (list (cons #20=(Uid "tag2" 19) (Op 'binary-and (list (Var #11#) (Quote 7))))) (If (Op '= (list (Var #20#) (Quote 0))) (Let (list (cons #19=(Uid "value" 20) (Op 'Array-ref (list (Var #10#) (Quote 0))))) (Let (list (cons #18=(Uid "tmp_clos" 32) (Op 'Array-ref (list (Var #19#) (Quote 1))))) (App (Op 'Array-ref (list (Var #18#) (Quote 0))) (list (Var #18#) (Var #19#) (Var #17#) (Var #11#) (Var #9#))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0))))) (If (Op '= (list (Var #17#) (Quote 15))) (If (Op '= (list (Quote 15) (Var #11#))) (Op 'Array-ref (list (Var #10#) (Quote 0))) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Op 'Array-ref (list (Var #10#) (Quote 0))) (Quote 3))) (Quote 1))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (If (Op '= (list (Var #17#) (Quote 23))) (If (Op '= (list (Quote 23) (Var #11#))) (Op 'Array-ref (list (Var #10#) (Quote 0))) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Op 'Array-ref (list (Var #10#) (Quote 0))) (Quote 3))) (Quote 7))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0))))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0))))))) (Let (list (cons #16=(Uid "tag1" 21) (Op 'binary-and (list (Var #12#) (Quote 7))))) (If (Op '= (list (Quote 0) (Var #16#))) (If (Op '= (list (Quote 7) (Var #11#))) (Let (list (cons #15=(Uid "dyn_box" 29) (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #15#) (Quote 0) (Var #10#))) (Op 'Array-set! (list (Var #15#) (Quote 1) (Var #12#)))) (Var #15#))) (Let (list (cons #14=(Uid "tag2" 22) (Op 'binary-and (list (Var #11#) (Quote 7))))) (If (Op '= (list (Var #14#) (Quote 0))) (Let (list (cons #13=(Uid "tmp_clos" 33) (Op 'Array-ref (list (Var #10#) (Quote 1))))) (App (Op 'Array-ref (list (Var #13#) (Quote 0))) (list (Var #13#) (Var #10#) (Var #12#) (Var #11#) (Var #9#)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0))))) (If (Op '= (list (Var #12#) (Quote 15))) (If (Op '= (list (Quote 15) (Var #11#))) (Var #10#) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Var #10#) (Quote 3))) (Quote 1))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (If (Op '= (list (Var #12#) (Quote 23))) (If (Op '= (list (Quote 23) (Var #11#))) (Var #10#) (If (Op '= (list (Quote 7) (Var #11#))) (Op '+ (list (Op '%<< (list (Var #10#) (Quote 3))) (Quote 7))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Quote 0))))))))) (cons #24=(Uid "cast_fn2_code" 41) (Code (list #26=(Uid "cast_fn2_clos" 40) #31=(Uid "f" 4) #29=(Uid "t1" 5) #30=(Uid "t2" 6) #28=(Uid "lbl" 7)) (If (Op '= (list (Op 'Array-ref (list (Var #29#) (Quote 0))) (Op 'Array-ref (list (Var #30#) (Quote 0))))) (Let (list (cons #27=(Uid "annon" 30) (Op 'Alloc (list (Quote 8))))) (Begin (list (Op 'Array-set! (list (Var #27#) (Quote 7) (Var #31#))) (Op 'Array-set! (list (Var #27#) (Quote 6) (Var #30#))) (Op 'Array-set! (list (Var #27#) (Quote 5) (Var #29#))) (Op 'Array-set! (list (Var #27#) (Quote 4) (Var #28#))) (Op 'Array-set! (list (Var #27#) (Quote 3) (Op 'Array-ref (list (Var #26#) (Quote 3))))) (Op 'Array-set! (list (Var #27#) (Quote 2) (Op 'Array-ref (list (Var #26#) (Quote 2))))) (Op 'Array-set! (list (Var #27#) (Quote 0) (Code-Label #32=(Uid "annon_code" 37)))) (Op 'Array-set! (list (Var #27#) (Quote 1) (Op 'Array-ref (list (Var #26#) (Quote 2)))))) (Var #27#))) (Let (list (cons #25=(Uid "annon" 31) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #25#) (Quote 3) (Var #28#))) (Op 'Array-set! (list (Var #25#) (Quote 2) (Op 'Array-ref (list (Var #26#) (Quote 2))))) (Op 'Array-set! (list (Var #25#) (Quote 0) (Code-Label #36=(Uid "annon_code" 39)))) (Op 'Array-set! (list (Var #25#) (Quote 1) (Op 'Array-ref (list (Var #26#) (Quote 2)))))) (Var #25#)))))) (cons #32# (Code (list #33=(Uid "annon_clos" 36) #34=(Uid "v" 9) #35=(Uid "v" 8)) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 7))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 7))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Var #34#) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 2))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 2))) (Op 'Array-ref (list (Var #33#) (Quote 4))))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Var #35#) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 3))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 3))) (Op 'Array-ref (list (Var #33#) (Quote 4))))))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 1))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 1))) (Op 'Array-ref (list (Var #33#) (Quote 4))))))) (cons #36# (Code (list #37=(Uid "annon_clos" 38)) (Begin (list (Op 'Print (list (Op 'Array-ref (list (Var #37#) (Quote 3))))) (Op 'Exit '())) (Quote 0)))) (cons #38=(Uid "fact_code" 43) (Code (list #41=(Uid "fact_clos" 42) #39=(Uid "f" 2) #42=(Uid "n" 1)) (If (Op '= (list (Var #42#) (Quote 0))) (Quote 1) (Op '* (list (Var #42#) (App (Op 'Array-ref (list (Var #39#) (Quote 0))) (list (Var #39#) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #41#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #41#) (Quote 3))) (Var #39#) (Let (list (cons #40=(Uid "tmp" 27) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #40#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #40#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #40#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #40#) (Quote 3) (Quote 15)))) (Var #40#))) (Quote 7) (Quote "Implicit cast in application at fact15.schml::138 on expression at fact15.schml::141"))) (Op '- (list (Var #42#) (Quote 1))))))))))) (Let (list (cons #7=(Uid "interp_cast" 10) (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #7#) (Quote 0) (Code-Label #8#))) (Op 'Array-set! (list (Var #7#) (Quote 1) (Quote 0)))) (Let (list (cons #0=(Uid "prog_returns" 23) (Let (list (cons #6=(Uid "cast_fn2" 3) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #6#) (Quote 3) (Var #7#))) (Op 'Array-set! (list (Var #6#) (Quote 2) (Var #6#))) (Op 'Array-set! (list (Var #6#) (Quote 0) (Code-Label #24#))) (Op 'Array-set! (list (Var #6#) (Quote 1) (Quote 0)))) (Let (list (cons #1=(Uid "fact" 0) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #1#) (Quote 3) (Var #7#))) (Op 'Array-set! (list (Var #1#) (Quote 2) (Var #6#))) (Op 'Array-set! (list (Var #1#) (Quote 0) (Code-Label #38#))) (Op 'Array-set! (list (Var #1#) (Quote 1) (Var #6#)))) (App (Op 'Array-ref (list (Var #1#) (Quote 0))) (list (Var #1#) (Let (list (cons #5=(Uid "tmp_clos" 44) (Op 'Array-ref (list (Var #1#) (Quote 1))))) (App (Op 'Array-ref (list (Var #5#) (Quote 0))) (list (Var #5#) (Var #1#) (Let (list (cons #2=(Uid "tmp" 25) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #2#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #2#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #2#) (Quote 2) (Let (list (cons #3=(Uid "tmp" 26) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #3#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #3#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #3#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #3#) (Quote 3) (Quote 15)))) (Var #3#))))) (Op 'Array-set! (list (Var #2#) (Quote 3) (Quote 15)))) (Var #2#))) (Let (list (cons #4=(Uid "tmp" 24) (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #4#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #4#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #4#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #4#) (Quote 3) (Quote 15)))) (Var #4#))) (Quote "Implicit cast in application at fact15.schml::159 on expression at fact15.schml::165")))) (Quote 15))))))))) (Begin (list (Op 'Printf (list (Quote "Int : %d\n") (Var #0#)))) (Quote 0)))))))

UIL0:
(Prog (list "fact15.schml" 45 (Int)) (Labels (list (cons #8=(Uid "interp_cast_code" 35) (Code (list (Uid "interp_cast_clos" 34) #10=(Uid "val" 11) #12=(Uid "type1" 13) #11=(Uid "type2" 14) #9=(Uid "label" 15)) (Locals (list #23=(Uid "tag" 16) #17=(Uid "type1" 17) #22=(Uid "tag1" 18) #21=(Uid "dyn_box" 28) #20=(Uid "tag2" 19) #19=(Uid "value" 20) #18=(Uid "tmp_clos" 32) #16=(Uid "tag1" 21) #15=(Uid "dyn_box" 29) #14=(Uid "tag2" 22) #13=(Uid "tmp_clos" 33)) (If (Relop '= (Var #12#) (Quote 7)) (If (Relop '= (Quote 7) (Var #11#)) (Return (Var #10#)) (Begin (list (Assign #23# (Op 'binary-and (list (Var #10#) (Quote 7))))) (If (Relop '= (Quote 1) (Var #23#)) (If (Relop '= (Quote 15) (Var #11#)) (Return (Op '%>> (list (Var #10#) (Quote 3)))) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Op '%>> (list (Var #10#) (Quote 3))) (Quote 3))) (Quote 1)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (If (Relop '= (Quote 7) (Var #23#)) (If (Relop '= (Quote 23) (Var #11#)) (Return (Op '%>> (list (Var #10#) (Quote 3)))) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Op '%>> (list (Var #10#) (Quote 3))) (Quote 3))) (Quote 7)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (If (Relop '= (Quote 0) (Var #23#)) (Begin (list (Assign #17# (Op 'Array-ref (list (Var #10#) (Quote 1))))) (Begin (list (Assign #22# (Op 'binary-and (list (Var #17#) (Quote 7))))) (If (Relop '= (Quote 0) (Var #22#)) (If (Relop '= (Quote 7) (Var #11#)) (Begin (list (Assign #21# (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #21#) (Quote 0) (Op 'Array-ref (list (Var #10#) (Quote 0))))) (Op 'Array-set! (list (Var #21#) (Quote 1) (Var #17#)))) (Return (Var #21#)))) (Begin (list (Assign #20# (Op 'binary-and (list (Var #11#) (Quote 7))))) (If (Relop '= (Var #20#) (Quote 0)) (Begin (list (Assign #19# (Op 'Array-ref (list (Var #10#) (Quote 0))))) (Begin (list (Assign #18# (Op 'Array-ref (list (Var #19#) (Quote 1))))) (Return (App (Op 'Array-ref (list (Var #18#) (Quote 0))) (list (Var #18#) (Var #19#) (Var #17#) (Var #11#) (Var #9#)))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0)))))) (If (Relop '= (Var #17#) (Quote 15)) (If (Relop '= (Quote 15) (Var #11#)) (Return (Op 'Array-ref (list (Var #10#) (Quote 0)))) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Op 'Array-ref (list (Var #10#) (Quote 0))) (Quote 3))) (Quote 1)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (If (Relop '= (Var #17#) (Quote 23)) (If (Relop '= (Quote 23) (Var #11#)) (Return (Op 'Array-ref (list (Var #10#) (Quote 0)))) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Op 'Array-ref (list (Var #10#) (Quote 0))) (Quote 3))) (Quote 7)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0)))))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0)))))))) (Begin (list (Assign #16# (Op 'binary-and (list (Var #12#) (Quote 7))))) (If (Relop '= (Quote 0) (Var #16#)) (If (Relop '= (Quote 7) (Var #11#)) (Begin (list (Assign #15# (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #15#) (Quote 0) (Var #10#))) (Op 'Array-set! (list (Var #15#) (Quote 1) (Var #12#)))) (Return (Var #15#)))) (Begin (list (Assign #14# (Op 'binary-and (list (Var #11#) (Quote 7))))) (If (Relop '= (Var #14#) (Quote 0)) (Begin (list (Assign #13# (Op 'Array-ref (list (Var #10#) (Quote 1))))) (Return (App (Op 'Array-ref (list (Var #13#) (Quote 0))) (list (Var #13#) (Var #10#) (Var #12#) (Var #11#) (Var #9#))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0)))))) (If (Relop '= (Var #12#) (Quote 15)) (If (Relop '= (Quote 15) (Var #11#)) (Return (Var #10#)) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Var #10#) (Quote 3))) (Quote 1)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (If (Relop '= (Var #12#) (Quote 23)) (If (Relop '= (Quote 23) (Var #11#)) (Return (Var #10#)) (If (Relop '= (Quote 7) (Var #11#)) (Return (Op '+ (list (Op '%<< (list (Var #10#) (Quote 3))) (Quote 7)))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))) (Begin (list (Op 'Print (list (Var #9#))) (Op 'Exit '())) (Return (Quote 0))))))))))) (cons #24=(Uid "cast_fn2_code" 41) (Code (list #26=(Uid "cast_fn2_clos" 40) #31=(Uid "f" 4) #30=(Uid "t1" 5) #29=(Uid "t2" 6) #28=(Uid "lbl" 7)) (Locals (list #27=(Uid "annon" 30) #25=(Uid "annon" 31)) (If (Relop '= (Op 'Array-ref (list (Var #30#) (Quote 0))) (Op 'Array-ref (list (Var #29#) (Quote 0)))) (Begin (list (Assign #27# (Op 'Alloc (list (Quote 8))))) (Begin (list (Op 'Array-set! (list (Var #27#) (Quote 7) (Var #31#))) (Op 'Array-set! (list (Var #27#) (Quote 6) (Var #29#))) (Op 'Array-set! (list (Var #27#) (Quote 5) (Var #30#))) (Op 'Array-set! (list (Var #27#) (Quote 4) (Var #28#))) (Op 'Array-set! (list (Var #27#) (Quote 3) (Op 'Array-ref (list (Var #26#) (Quote 3))))) (Op 'Array-set! (list (Var #27#) (Quote 2) (Op 'Array-ref (list (Var #26#) (Quote 2))))) (Op 'Array-set! (list (Var #27#) (Quote 0) (Code-Label #32=(Uid "annon_code" 37)))) (Op 'Array-set! (list (Var #27#) (Quote 1) (Op 'Array-ref (list (Var #26#) (Quote 2)))))) (Return (Var #27#)))) (Begin (list (Assign #25# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #25#) (Quote 3) (Var #28#))) (Op 'Array-set! (list (Var #25#) (Quote 2) (Op 'Array-ref (list (Var #26#) (Quote 2))))) (Op 'Array-set! (list (Var #25#) (Quote 0) (Code-Label #36=(Uid "annon_code" 39)))) (Op 'Array-set! (list (Var #25#) (Quote 1) (Op 'Array-ref (list (Var #26#) (Quote 2)))))) (Return (Var #25#)))))))) (cons #32# (Code (list #33=(Uid "annon_clos" 36) #34=(Uid "v" 9) #35=(Uid "v" 8)) (Locals '() (Return (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 7))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 7))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Var #34#) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 2))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 2))) (Op 'Array-ref (list (Var #33#) (Quote 4))))) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #33#) (Quote 3))) (Var #35#) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 3))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 3))) (Op 'Array-ref (list (Var #33#) (Quote 4))))))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 5))) (Quote 1))) (Op 'Array-ref (list (Op 'Array-ref (list (Var #33#) (Quote 6))) (Quote 1))) (Op 'Array-ref (list (Var #33#) (Quote 4))))))))) (cons #36# (Code (list #37=(Uid "annon_clos" 38)) (Locals '() (Begin (list (Op 'Print (list (Op 'Array-ref (list (Var #37#) (Quote 3))))) (Op 'Exit '())) (Return (Quote 0)))))) (cons #38=(Uid "fact_code" 43) (Code (list #41=(Uid "fact_clos" 42) #39=(Uid "f" 2) #42=(Uid "n" 1)) (Locals (list #40=(Uid "tmp" 27)) (If (Relop '= (Var #42#) (Quote 0)) (Return (Quote 1)) (Return (Op '* (list (Var #42#) (App (Op 'Array-ref (list (Var #39#) (Quote 0))) (list (Var #39#) (App (Op 'Array-ref (list (Op 'Array-ref (list (Var #41#) (Quote 3))) (Quote 0))) (list (Op 'Array-ref (list (Var #41#) (Quote 3))) (Var #39#) (Begin (list (Assign #40# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #40#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #40#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #40#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #40#) (Quote 3) (Quote 15)))) (Var #40#))) (Quote 7) (Quote "Implicit cast in application at fact15.schml::138 on expression at fact15.schml::141"))) (Op '- (list (Var #42#) (Quote 1))))))))))))) (Locals (list #6=(Uid "interp_cast" 10) #7=(Uid "prog_returns" 23) #5=(Uid "cast_fn2" 3) #0=(Uid "fact" 0) #4=(Uid "tmp_clos" 44) #1=(Uid "tmp" 25) #2=(Uid "tmp" 26) #3=(Uid "tmp" 24)) (Begin (list (Assign #6# (Op 'Alloc (list (Quote 2))))) (Begin (list (Op 'Array-set! (list (Var #6#) (Quote 0) (Code-Label #8#))) (Op 'Array-set! (list (Var #6#) (Quote 1) (Quote 0)))) (Begin (list (Assign #7# (Begin (list (Assign #5# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #5#) (Quote 3) (Var #6#))) (Op 'Array-set! (list (Var #5#) (Quote 2) (Var #5#))) (Op 'Array-set! (list (Var #5#) (Quote 0) (Code-Label #24#))) (Op 'Array-set! (list (Var #5#) (Quote 1) (Quote 0)))) (Begin (list (Assign #0# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #0#) (Quote 3) (Var #6#))) (Op 'Array-set! (list (Var #0#) (Quote 2) (Var #5#))) (Op 'Array-set! (list (Var #0#) (Quote 0) (Code-Label #38#))) (Op 'Array-set! (list (Var #0#) (Quote 1) (Var #5#)))) (App (Op 'Array-ref (list (Var #0#) (Quote 0))) (list (Var #0#) (Begin (list (Assign #4# (Op 'Array-ref (list (Var #0#) (Quote 1))))) (App (Op 'Array-ref (list (Var #4#) (Quote 0))) (list (Var #4#) (Var #0#) (Begin (list (Assign #1# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #1#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #1#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #1#) (Quote 2) (Begin (list (Assign #2# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #2#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #2#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #2#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #2#) (Quote 3) (Quote 15)))) (Var #2#))))) (Op 'Array-set! (list (Var #1#) (Quote 3) (Quote 15)))) (Var #1#))) (Begin (list (Assign #3# (Op 'Alloc (list (Quote 4))))) (Begin (list (Op 'Array-set! (list (Var #3#) (Quote 0) (Quote 2))) (Op 'Array-set! (list (Var #3#) (Quote 1) (Quote 15))) (Op 'Array-set! (list (Var #3#) (Quote 2) (Quote 7))) (Op 'Array-set! (list (Var #3#) (Quote 3) (Quote 15)))) (Var #3#))) (Quote "Implicit cast in application at fact15.schml::159 on expression at fact15.schml::165")))) (Quote 15))))))))) (Begin (list (Op 'Printf (list (Quote "Int : %d\n") (Var #7#)))) (Return (Quote 0)))))))))

